const zero = `<svg viewBox="0 0 33.496605 33.496605" version="1.1">
<defs/>
<g>
  <path style="opacity:1;mix-blend-mode:normal;fill:#85f3f5;stroke:#06727b;stroke-width:2.89375;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:0;paint-order:stroke fill markers" d="M 16.844101 2.4061666 A 14.252845 14.252845 0 0 0 2.5912204 16.659047 A 14.252845 14.252845 0 0 0 16.844101 30.911927 A 14.252845 14.252845 0 0 0 31.096981 16.659047 A 14.252845 14.252845 0 0 0 16.844101 2.4061666 z M 16.844101 6.0193886 A 10.63992 10.63992 0 0 1 17.14271 6.0235944 A 10.63992 10.63992 0 0 1 17.440852 6.0362117 A 10.63992 10.63992 0 0 1 17.738527 6.0567732 A 10.63992 10.63992 0 0 1 18.035735 6.0862136 A 10.63992 10.63992 0 0 1 18.331541 6.1235982 A 10.63992 10.63992 0 0 1 18.626412 6.1693943 A 10.63992 10.63992 0 0 1 18.919881 6.223602 A 10.63992 10.63992 0 0 1 19.211948 6.2862212 A 10.63992 10.63992 0 0 1 19.501679 6.3563173 A 10.63992 10.63992 0 0 1 19.790008 6.4352923 A 10.63992 10.63992 0 0 1 20.075532 6.5217442 A 10.63992 10.63992 0 0 1 20.358254 6.6161403 A 10.63992 10.63992 0 0 1 20.638638 6.718948 A 10.63992 10.63992 0 0 1 20.916219 6.8292326 A 10.63992 10.63992 0 0 1 21.190061 6.9469941 A 10.63992 10.63992 0 0 1 21.460632 7.0726998 A 10.63992 10.63992 0 0 1 21.727932 7.2063498 A 10.63992 10.63992 0 0 1 21.991026 7.3470093 A 10.63992 10.63992 0 0 1 22.250382 7.4946785 A 10.63992 10.63992 0 0 1 22.505064 7.6502919 A 10.63992 10.63992 0 0 1 22.755541 7.8124477 A 10.63992 10.63992 0 0 1 23.001345 7.981613 A 10.63992 10.63992 0 0 1 23.242008 8.1577879 A 10.63992 10.63992 0 0 1 23.477999 8.3405052 A 10.63992 10.63992 0 0 1 23.708849 8.5297648 A 10.63992 10.63992 0 0 1 23.934091 8.7255666 A 10.63992 10.63992 0 0 1 24.153725 8.9274435 A 10.63992 10.63992 0 0 1 24.367752 9.1353953 A 10.63992 10.63992 0 0 1 24.575704 9.3494222 A 10.63992 10.63992 0 0 1 24.778048 9.5695241 A 10.63992 10.63992 0 0 1 24.973383 9.7947663 A 10.63992 10.63992 0 0 1 25.16311 10.025149 A 10.63992 10.63992 0 0 1 25.345827 10.261139 A 10.63992 10.63992 0 0 1 25.522002 10.50227 A 10.63992 10.63992 0 0 1 25.691167 10.748074 A 10.63992 10.63992 0 0 1 25.853323 10.998551 A 10.63992 10.63992 0 0 1 26.008469 11.253233 A 10.63992 10.63992 0 0 1 26.156606 11.512589 A 10.63992 10.63992 0 0 1 26.297265 11.775683 A 10.63992 10.63992 0 0 1 26.430448 12.042516 A 10.63992 10.63992 0 0 1 26.556154 12.313554 A 10.63992 10.63992 0 0 1 26.674382 12.587396 A 10.63992 10.63992 0 0 1 26.784667 12.864977 A 10.63992 10.63992 0 0 1 26.887007 13.144894 A 10.63992 10.63992 0 0 1 26.981871 13.428083 A 10.63992 10.63992 0 0 1 27.068323 13.713607 A 10.63992 10.63992 0 0 1 27.14683 14.001469 A 10.63992 10.63992 0 0 1 27.217394 14.291667 A 10.63992 10.63992 0 0 1 27.279546 14.583267 A 10.63992 10.63992 0 0 1 27.333753 14.876736 A 10.63992 10.63992 0 0 1 27.379549 15.171607 A 10.63992 10.63992 0 0 1 27.417401 15.46788 A 10.63992 10.63992 0 0 1 27.446374 15.765088 A 10.63992 10.63992 0 0 1 27.467403 16.062762 A 10.63992 10.63992 0 0 1 27.480021 16.360905 A 10.63992 10.63992 0 0 1 27.484226 16.659047 A 10.63992 10.63992 0 0 1 27.447776 17.537585 A 10.63992 10.63992 0 0 1 27.338894 18.410516 A 10.63992 10.63992 0 0 1 27.158513 19.271296 A 10.63992 10.63992 0 0 1 26.907569 20.113852 A 10.63992 10.63992 0 0 1 26.587931 20.933042 A 10.63992 10.63992 0 0 1 26.201934 21.723259 A 10.63992 10.63992 0 0 1 25.75145 22.478428 A 10.63992 10.63992 0 0 1 25.240683 23.194343 A 10.63992 10.63992 0 0 1 24.672437 23.865397 A 10.63992 10.63992 0 0 1 24.05045 24.487383 A 10.63992 10.63992 0 0 1 23.379397 25.055629 A 10.63992 10.63992 0 0 1 22.663949 25.566396 A 10.63992 10.63992 0 0 1 21.908313 26.016881 A 10.63992 10.63992 0 0 1 21.118096 26.402877 A 10.63992 10.63992 0 0 1 20.298905 26.722515 A 10.63992 10.63992 0 0 1 19.45635 26.973459 A 10.63992 10.63992 0 0 1 18.595569 27.15384 A 10.63992 10.63992 0 0 1 17.723106 27.262723 A 10.63992 10.63992 0 0 1 16.844101 27.299173 A 10.63992 10.63992 0 0 1 15.965563 27.262723 A 10.63992 10.63992 0 0 1 15.093099 27.15384 A 10.63992 10.63992 0 0 1 14.232319 26.973459 A 10.63992 10.63992 0 0 1 13.389296 26.722515 A 10.63992 10.63992 0 0 1 12.570106 26.402877 A 10.63992 10.63992 0 0 1 11.780356 26.016881 A 10.63992 10.63992 0 0 1 11.02472 25.566396 A 10.63992 10.63992 0 0 1 10.309272 25.055629 A 10.63992 10.63992 0 0 1 9.6382183 24.487383 A 10.63992 10.63992 0 0 1 9.0162319 23.865397 A 10.63992 10.63992 0 0 1 8.4479859 23.194343 A 10.63992 10.63992 0 0 1 7.9367515 22.478428 A 10.63992 10.63992 0 0 1 7.4867343 21.723259 A 10.63992 10.63992 0 0 1 7.1007383 20.933042 A 10.63992 10.63992 0 0 1 6.7806326 20.113852 A 10.63992 10.63992 0 0 1 6.5301557 19.271296 A 10.63992 10.63992 0 0 1 6.3493077 18.410516 A 10.63992 10.63992 0 0 1 6.2408924 17.537585 A 10.63992 10.63992 0 0 1 6.2044424 16.659047 A 10.63992 10.63992 0 0 1 6.2408924 15.780509 A 10.63992 10.63992 0 0 1 6.3493077 14.908046 A 10.63992 10.63992 0 0 1 6.5301557 14.047265 A 10.63992 10.63992 0 0 1 6.7806326 13.204242 A 10.63992 10.63992 0 0 1 7.1007383 12.385052 A 10.63992 10.63992 0 0 1 7.4867343 11.595302 A 10.63992 10.63992 0 0 1 7.9367515 10.839666 A 10.63992 10.63992 0 0 1 8.4479859 10.124218 A 10.63992 10.63992 0 0 1 9.0162319 9.4531645 A 10.63992 10.63992 0 0 1 9.6382183 8.8311781 A 10.63992 10.63992 0 0 1 10.309272 8.2629321 A 10.63992 10.63992 0 0 1 11.02472 7.7516977 A 10.63992 10.63992 0 0 1 11.780356 7.3016805 A 10.63992 10.63992 0 0 1 12.570106 6.9152172 A 10.63992 10.63992 0 0 1 13.389296 6.5955788 A 10.63992 10.63992 0 0 1 14.232319 6.3446346 A 10.63992 10.63992 0 0 1 15.093099 6.1642539 A 10.63992 10.63992 0 0 1 15.965563 6.0553713 A 10.63992 10.63992 0 0 1 16.844101 6.0193886 z "/>
</g>
</svg>`;

const cross = `<svg viewBox="0 0 25.091728 25.091728" version="1.1">
<defs/>
<g>
  <path style="fill:#85f3f5;stroke:#06727b;stroke-width:2.76118;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:0;paint-order:stroke fill markers;fill-opacity:1;stroke-opacity:1" d="M 1.332175 4.6118699 C 1.3164028 4.5960978 1.2944649 4.5861274 1.2702939 4.5861274 L -1.6091545 4.586375 C -1.6574964 4.586375 -1.6965305 4.6254091 -1.6965305 4.673751 L -1.6965305 16.322733 L -13.345512 16.322733 C -13.393854 16.322733 -13.432888 16.361767 -13.432888 16.410109 L -13.433136 19.289557 C -13.433136 19.337899 -13.394101 19.376933 -13.34576 19.376933 L -1.6965305 19.376685 L -1.6965305 31.026162 C -1.6965305 31.074504 -1.6577439 31.113291 -1.609402 31.113291 L 1.2702939 31.113291 C 1.3186358 31.113291 1.35767 31.074256 1.35767 31.025914 L 1.35767 19.376933 L 13.006651 19.376933 C 13.054993 19.376933 13.094027 19.337899 13.094027 19.289557 L 13.094027 16.409861 C 13.094027 16.361519 13.055241 16.322733 13.006899 16.322733 L 1.3574224 16.322733 L 1.35767 4.6735035 C 1.35767 4.6493325 1.3479472 4.6276421 1.332175 4.6118699 z " transform="rotate(-45)"/>
</g>
</svg>`;

let xState = [0, 0, 0, 0, 0, 0, 0, 0, 0];
let zState = [0, 0, 0, 0, 0, 0, 0, 0, 0];
let turn = 1; // 0 for X ; 1 for O


let winnerFound = false;
let valid;

const boxes = document.getElementsByClassName('box');
const title = document.querySelector('h1');
const endMessage = document.querySelector('.endMessage');
const winMessage = document.querySelector('.winMessage');

function sum(a, b, c) {
    return parseInt(a) + parseInt(b) + parseInt(c);
};


function renderBoard(st1, st2) {
    for (let i = 0; i < 9; i++) {
        let temp = st1[i] == 1 ? cross : st2[i] == 1 ? zero : "";
        let tempContainer = boxes[i];
        tempContainer.innerHTML = temp;
    }
}

function checkWin(st1, st2) {
    // All of the win possibilities :
    let Wins = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];

    // Checking win for X
    for (let i = 0; i < Wins.length; i++) {
        const win = Wins[i];
        if (sum(st1[win[0]], st1[win[1]], st1[win[2]]) == 3) {
            console.log('X win');
            return 1;
        }
    }

    // Checking win for O
    for (let i = 0; i < Wins.length; i++) {
        const win = Wins[i];
        if (sum(st2[win[0]], st2[win[1]], st2[win[2]]) == 3) {
            console.log('O win');
            return 0;
        }
    }
    // returns -1 if no win
    return -1;
}

for (box of boxes) {
    box.addEventListener('click', (e) => {
        if (!winnerFound) {

            valid = false;
            let id = parseInt(e.target.id.charAt('1'));

            if (turn == 0) {
                if (xState[id] == 1 || zState[id] == 1) {
                    alert('Click on an empty field.');
                }
                else {
                    xState[id] = 1;
                    valid = true;
                }
            }
            else {
                if (xState[id] == 1 || zState[id] == 1) {
                    alert('Click on an empty field.');
                }
                else {
                    zState[id] = 1;
                    valid = true;
                }
            }

            if (valid) {
                turn = 1 - turn;
                console.log('TURN :', turn == 1 ? 'X' : 'O');
                renderBoard(xState, zState);
                let win = checkWin(xState, zState);

                if (win == 1) {
                    // X wins
                    winMessage.innerHTML = 'X is the winner';
                    winMessage.classList.add('showWin');
                    endMessage.classList.add('show');
                    title.classList.add('hide');
                    winnerFound = true;
                }
                else if (win == 0) {
                    // O wins
                    winMessage.innerHTML = 'O is the winner';
                    winMessage.classList.add('showWin');
                    endMessage.classList.add('show');
                    title.classList.add('hide');
                    winnerFound = true;
                }
            }
        }
        else {
            endMessage.classList.add('show');
            title.classList.add('hide');
        }
    });
}

